import { createSlice } from "@reduxjs/toolkit";
import { updateCart } from "../../../utils/cartUtils";

// Define initial state for the cart slice, including cart items, shipping address, and payment method fetched from localStorage if available.
const initialState = localStorage.getItem("cart")
  ? JSON.parse(localStorage.getItem("cart"))
  : { cartItems: [], shippingAddress: {}, paymentMethod: "PayPal" };

// Create the cart slice using createSlice from Redux Toolkit.
const cartSlice = createSlice({
  name: "cart", // Name of the slice
  initialState, // Initial state
  reducers: {
    // Reducer function to add an item to the cart.
    addToCart: (state, action) => {
      const { user, rating, numReviews, reviews, ...item } = action.payload;
      const existItem = state.cartItems.find((x) => x._id === item._id);

      if (existItem) {
        state.cartItems = state.cartItems.map((x) =>
          x._id === existItem._id ? item : x
        );
      } else {
        state.cartItems = [...state.cartItems, item];
      }
      // Update cart and return the updated state
      return updateCart(state, item);
    },

    // Reducer function to remove an item from the cart.
    removeFromCart: (state, action) => {
      state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);
      // Update cart and return the updated state
      return updateCart(state);
    },

    // Reducer function to save shipping address.
    saveShippingAddress: (state, action) => {
      state.shippingAddress = action.payload;
      localStorage.setItem("cart", JSON.stringify(state)); // Save cart in localStorage
    },

    // Reducer function to save payment method.
    savePaymentMethod: (state, action) => {
      state.paymentMethod = action.payload;
      localStorage.setItem("cart", JSON.stringify(state)); // Save cart in localStorage
    },

    // Reducer function to clear cart items.
    clearCartItems: (state, action) => {
      state.cartItems = [];
      localStorage.setItem("cart", JSON.stringify(state)); // Save cart in localStorage
    },

    // Reducer function to reset cart to initial state.
    resetCart: (state) => (state = initialState),
  },
});

// Export actions generated by the cart slice.
export const {
  addToCart,
  removeFromCart,
  savePaymentMethod,
  saveShippingAddress,
  clearCartItems,
  resetCart,
} = cartSlice.actions;

// Export the reducer function generated by the cart slice.
export default cartSlice.reducer;
